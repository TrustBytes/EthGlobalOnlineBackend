{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "querySize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuerySize",
          "type": "uint256"
        }
      ],
      "name": "MaxQuerySizeExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "CreateTable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOwner",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "statement",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowInsert",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowUpdate",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowDelete",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "whereClause",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "withCheck",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "updatableColumns",
              "type": "string[]"
            }
          ],
          "indexed": false,
          "internalType": "struct TablelandPolicy",
          "name": "policy",
          "type": "tuple"
        }
      ],
      "name": "RunSQL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "SetController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        }
      ],
      "name": "TransferTable",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "statements",
          "type": "string[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        }
      ],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        }
      ],
      "name": "lockController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "statement",
          "type": "string"
        }
      ],
      "name": "mutate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "statement",
              "type": "string"
            }
          ],
          "internalType": "struct ITablelandTables.Statement[]",
          "name": "statements",
          "type": "tuple[]"
        }
      ],
      "name": "mutate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "create(address,string)": "a15ab08d",
    "create(address,string[])": "61a23d0f",
    "getController(uint256)": "58edaa9c",
    "lockController(address,uint256)": "05295681",
    "mutate(address,(uint256,string)[])": "abf69aa3",
    "mutate(address,uint256,string)": "377af0da",
    "pause()": "8456cb59",
    "setBaseURI(string)": "55f804b3",
    "setController(address,uint256,address)": "8bb0ab97",
    "unpause()": "3f4ba83a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"querySize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuerySize\",\"type\":\"uint256\"}],\"name\":\"MaxQuerySizeExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"CreateTable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOwner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowInsert\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowDelete\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"whereClause\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"withCheck\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"updatableColumns\",\"type\":\"string[]\"}],\"indexed\":false,\"internalType\":\"struct TablelandPolicy\",\"name\":\"policy\",\"type\":\"tuple\"}],\"name\":\"RunSQL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"}],\"name\":\"TransferTable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"statements\",\"type\":\"string[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"}],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"}],\"name\":\"lockController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"name\":\"mutate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"statement\",\"type\":\"string\"}],\"internalType\":\"struct ITablelandTables.Statement[]\",\"name\":\"statements\",\"type\":\"tuple[]\"}],\"name\":\"mutate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of a TablelandTables compliant contract.\",\"events\":{\"CreateTable(address,uint256,string)\":{\"details\":\"Emitted when `owner` creates a new table. owner - the to-be owner of the table tableId - the table id of the new table statement - the SQL statement used to create the table\"},\"RunSQL(address,bool,uint256,string,(bool,bool,bool,string,string,string[]))\":{\"details\":\"Emitted when `caller` runs a SQL statement. caller - the address that is running the SQL statement isOwner - whether or not the caller is the table owner tableId - the id of the target table statement - the SQL statement to run policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\"},\"SetController(uint256,address)\":{\"details\":\"Emitted when a table's controller is set. tableId - the id of the target table controller - the address of the controller (EOA or contract)\"},\"TransferTable(address,address,uint256)\":{\"details\":\"Emitted when a table is transferred from `from` to `to`. Not emmitted when a table is created. Also emitted after a table has been burned. from - the address that transfered the table to - the address that received the table tableId - the table id that was transferred\"}},\"kind\":\"dev\",\"methods\":{\"create(address,string)\":{\"details\":\"Creates a new table owned by `owner` using `statement` and returns its `tableId`. owner - the to-be owner of the new table statement - the SQL statement used to create the table           - the statement type must be CREATE Requirements: - contract must be unpaused\"},\"create(address,string[])\":{\"details\":\"Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s. owner - the to-be owner of the new table statements - the SQL statements used to create the tables            - each statement type must be CREATE Requirements: - contract must be unpaused\"},\"getController(uint256)\":{\"details\":\"Returns the controller for a table. tableId - the id of the target table\"},\"lockController(address,uint256)\":{\"details\":\"Locks the controller for a table _forever_. Controller can be an EOA or contract address. Although not very useful, it is possible to lock a table controller that is set to the zero address. caller - the address that is locking the controller tableId - the id of the target table Requirements: - contract must be unpaused - `msg.sender` must be `caller` and owner of `tableId` - `tableId` must exist - `tableId` controller must not be locked\"},\"mutate(address,(uint256,string)[])\":{\"details\":\"Runs an array of mutating SQL statements for `caller` caller - the address that is running the SQL statement statements - an array of structs containing the id of the target table and coresponding statement            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE Requirements: - contract must be unpaused - `msg.sender` must be `caller` - `tableId` must be the table being muated in each struct's statement - `caller` must be authorized by the table controller if the statement is mutating - each struct inside `statements` must have a `tableId` that corresponds to table being mutated - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\"},\"mutate(address,uint256,string)\":{\"details\":\"Runs a mutating SQL statement for `caller` using `statement`. caller - the address that is running the SQL statement tableId - the id of the target table statement - the SQL statement to run           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE Requirements: - contract must be unpaused - `msg.sender` must be `caller` - `tableId` must exist and be the table being mutated - `caller` must be authorized by the table controller - `statement` must be less than or equal to 35000 bytes\"},\"pause()\":{\"details\":\"Pauses the contract. Requirements: - `msg.sender` must be contract owner - contract must be unpaused\"},\"setBaseURI(string)\":{\"details\":\"Sets the contract base URI. baseURI - the new base URI Requirements: - `msg.sender` must be contract owner\"},\"setController(address,uint256,address)\":{\"details\":\"Sets the controller for a table. Controller can be an EOA or contract address. When a table is created, it's controller is set to the zero address, which means that the contract will not enforce write access control. In this situation, validators will not accept transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements. When a controller address is set for a table, validators assume write access control is handled at the contract level, and will accept all transactions. You can unset a controller address for a table by setting it back to the zero address. This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control. caller - the address that is setting the controller tableId - the id of the target table controller - the address of the controller (EOA or contract) Requirements: - contract must be unpaused - `msg.sender` must be `caller` and owner of `tableId` - `tableId` must exist - `tableId` controller must not be locked\"},\"unpause()\":{\"details\":\"Unpauses the contract. Requirements: - `msg.sender` must be contract owner - contract must be paused\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MaxQuerySizeExceeded(uint256,uint256)\":[{\"notice\":\"RunSQL was called with a query length greater than maximum allowed.\"}],\"Unauthorized()\":[{\"notice\":\"The caller is not authorized.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/evm-tableland/contracts/interfaces/ITablelandTables.sol\":\"ITablelandTables\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/=lib/openzeppelin/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@tableland/evm/=lib/evm-tableland/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":evm-tableland/=lib/evm-tableland/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin/contracts/\",\":prb-test/=lib/prb-test/src/\"]},\"sources\":{\"lib/evm-tableland/contracts/TablelandPolicy.sol\":{\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e19d4f4f0541ec188853ce753033e5c8cb185f1a37fb33bfdd4fc3d5c715e039\",\"dweb:/ipfs/QmZpooUck6GMkY38wd1xrJhRDfPymvgtgn3o9DuHLbp9kw\"]},\"lib/evm-tableland/contracts/interfaces/ITablelandTables.sol\":{\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f627029ce4bd5ba0348d93d5b310c8e934da7f8324a4c2906ae8cc9c12f2cbb\",\"dweb:/ipfs/Qmdx9fdrpYcWNEy8FWsA8HBMvdDHUS35bKgmvQQNPcP6pS\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "querySize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxQuerySize",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "MaxQuerySizeExceeded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Unauthorized"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "statement",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CreateTable",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "isOwner",
              "type": "bool",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "statement",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "struct TablelandPolicy",
              "name": "policy",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bool",
                  "name": "allowInsert",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "allowUpdate",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "allowDelete",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "whereClause",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "withCheck",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "updatableColumns",
                  "type": "string[]"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RunSQL",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "controller",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetController",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferTable",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string[]",
              "name": "statements",
              "type": "string[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "create",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "statement",
              "type": "string"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "create",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "getController",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lockController"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "statement",
              "type": "string"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "mutate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "struct ITablelandTables.Statement[]",
              "name": "statements",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tableId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "statement",
                  "type": "string"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "mutate"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pause"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setBaseURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "controller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setController"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unpause"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "create(address,string)": {
            "details": "Creates a new table owned by `owner` using `statement` and returns its `tableId`. owner - the to-be owner of the new table statement - the SQL statement used to create the table           - the statement type must be CREATE Requirements: - contract must be unpaused"
          },
          "create(address,string[])": {
            "details": "Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s. owner - the to-be owner of the new table statements - the SQL statements used to create the tables            - each statement type must be CREATE Requirements: - contract must be unpaused"
          },
          "getController(uint256)": {
            "details": "Returns the controller for a table. tableId - the id of the target table"
          },
          "lockController(address,uint256)": {
            "details": "Locks the controller for a table _forever_. Controller can be an EOA or contract address. Although not very useful, it is possible to lock a table controller that is set to the zero address. caller - the address that is locking the controller tableId - the id of the target table Requirements: - contract must be unpaused - `msg.sender` must be `caller` and owner of `tableId` - `tableId` must exist - `tableId` controller must not be locked"
          },
          "mutate(address,(uint256,string)[])": {
            "details": "Runs an array of mutating SQL statements for `caller` caller - the address that is running the SQL statement statements - an array of structs containing the id of the target table and coresponding statement            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE Requirements: - contract must be unpaused - `msg.sender` must be `caller` - `tableId` must be the table being muated in each struct's statement - `caller` must be authorized by the table controller if the statement is mutating - each struct inside `statements` must have a `tableId` that corresponds to table being mutated - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization"
          },
          "mutate(address,uint256,string)": {
            "details": "Runs a mutating SQL statement for `caller` using `statement`. caller - the address that is running the SQL statement tableId - the id of the target table statement - the SQL statement to run           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE Requirements: - contract must be unpaused - `msg.sender` must be `caller` - `tableId` must exist and be the table being mutated - `caller` must be authorized by the table controller - `statement` must be less than or equal to 35000 bytes"
          },
          "pause()": {
            "details": "Pauses the contract. Requirements: - `msg.sender` must be contract owner - contract must be unpaused"
          },
          "setBaseURI(string)": {
            "details": "Sets the contract base URI. baseURI - the new base URI Requirements: - `msg.sender` must be contract owner"
          },
          "setController(address,uint256,address)": {
            "details": "Sets the controller for a table. Controller can be an EOA or contract address. When a table is created, it's controller is set to the zero address, which means that the contract will not enforce write access control. In this situation, validators will not accept transactions from non-owners unless explicitly granted access with \"GRANT\" SQL statements. When a controller address is set for a table, validators assume write access control is handled at the contract level, and will accept all transactions. You can unset a controller address for a table by setting it back to the zero address. This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control. caller - the address that is setting the controller tableId - the id of the target table controller - the address of the controller (EOA or contract) Requirements: - contract must be unpaused - `msg.sender` must be `caller` and owner of `tableId` - `tableId` must exist - `tableId` controller must not be locked"
          },
          "unpause()": {
            "details": "Unpauses the contract. Requirements: - `msg.sender` must be contract owner - contract must be paused"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=lib/openzeppelin/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "@tableland/evm/=lib/evm-tableland/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "evm-tableland/=lib/evm-tableland/contracts/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin/contracts/",
        "prb-test/=lib/prb-test/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "lib/evm-tableland/contracts/interfaces/ITablelandTables.sol": "ITablelandTables"
      },
      "libraries": {}
    },
    "sources": {
      "lib/evm-tableland/contracts/TablelandPolicy.sol": {
        "keccak256": "0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0",
        "urls": [
          "bzz-raw://e19d4f4f0541ec188853ce753033e5c8cb185f1a37fb33bfdd4fc3d5c715e039",
          "dweb:/ipfs/QmZpooUck6GMkY38wd1xrJhRDfPymvgtgn3o9DuHLbp9kw"
        ],
        "license": "MIT"
      },
      "lib/evm-tableland/contracts/interfaces/ITablelandTables.sol": {
        "keccak256": "0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb",
        "urls": [
          "bzz-raw://9f627029ce4bd5ba0348d93d5b310c8e934da7f8324a4c2906ae8cc9c12f2cbb",
          "dweb:/ipfs/Qmdx9fdrpYcWNEy8FWsA8HBMvdDHUS35bKgmvQQNPcP6pS"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/evm-tableland/contracts/interfaces/ITablelandTables.sol",
    "id": 160,
    "exportedSymbols": {
      "ITablelandTables": [
        159
      ],
      "TablelandPolicy": [
        16
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:7782:1",
    "nodes": [
      {
        "id": 18,
        "nodeType": "PragmaDirective",
        "src": "32:32:1",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".10",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 20,
        "nodeType": "ImportDirective",
        "src": "66:55:1",
        "nodes": [],
        "absolutePath": "lib/evm-tableland/contracts/TablelandPolicy.sol",
        "file": "../TablelandPolicy.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 160,
        "sourceUnit": 17,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19,
              "name": "TablelandPolicy",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 16,
              "src": "74:15:1",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 159,
        "nodeType": "ContractDefinition",
        "src": "190:7623:1",
        "nodes": [
          {
            "id": 24,
            "nodeType": "ErrorDefinition",
            "src": "276:21:1",
            "nodes": [],
            "documentation": {
              "id": 22,
              "nodeType": "StructuredDocumentation",
              "src": "223:48:1",
              "text": " The caller is not authorized."
            },
            "errorSelector": "82b42900",
            "name": "Unauthorized",
            "nameLocation": "282:12:1",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "294:2:1"
            }
          },
          {
            "id": 31,
            "nodeType": "ErrorDefinition",
            "src": "394:68:1",
            "nodes": [],
            "documentation": {
              "id": 25,
              "nodeType": "StructuredDocumentation",
              "src": "303:86:1",
              "text": " RunSQL was called with a query length greater than maximum allowed."
            },
            "errorSelector": "287d9057",
            "name": "MaxQuerySizeExceeded",
            "nameLocation": "400:20:1",
            "parameters": {
              "id": 30,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27,
                  "mutability": "mutable",
                  "name": "querySize",
                  "nameLocation": "429:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31,
                  "src": "421:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "421:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29,
                  "mutability": "mutable",
                  "name": "maxQuerySize",
                  "nameLocation": "448:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 31,
                  "src": "440:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "440:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "420:41:1"
            }
          },
          {
            "id": 40,
            "nodeType": "EventDefinition",
            "src": "698:68:1",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 32,
              "nodeType": "StructuredDocumentation",
              "src": "468:225:1",
              "text": " @dev Emitted when `owner` creates a new table.\n owner - the to-be owner of the table\n tableId - the table id of the new table\n statement - the SQL statement used to create the table"
            },
            "eventSelector": "fe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd",
            "name": "CreateTable",
            "nameLocation": "704:11:1",
            "parameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "724:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "716:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "716:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "739:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "731:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "statement",
                  "nameLocation": "755:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "748:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 37,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "748:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "715:50:1"
            }
          },
          {
            "id": 49,
            "nodeType": "EventDefinition",
            "src": "1118:63:1",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 41,
              "nodeType": "StructuredDocumentation",
              "src": "772:341:1",
              "text": " @dev Emitted when a table is transferred from `from` to `to`.\n Not emmitted when a table is created.\n Also emitted after a table has been burned.\n from - the address that transfered the table\n to - the address that received the table\n tableId - the table id that was transferred"
            },
            "eventSelector": "16d5b5d582da969cea3131e89ffbd67ee6b1ebbe2576c7a97e9b852fce946a7f",
            "name": "TransferTable",
            "nameLocation": "1124:13:1",
            "parameters": {
              "id": 48,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 43,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1146:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49,
                  "src": "1138:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1138:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 45,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1160:2:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49,
                  "src": "1152:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 47,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "1172:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49,
                  "src": "1164:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1164:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1137:43:1"
            }
          },
          {
            "id": 63,
            "nodeType": "EventDefinition",
            "src": "1580:148:1",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 50,
              "nodeType": "StructuredDocumentation",
              "src": "1187:388:1",
              "text": " @dev Emitted when `caller` runs a SQL statement.\n caller - the address that is running the SQL statement\n isOwner - whether or not the caller is the table owner\n tableId - the id of the target table\n statement - the SQL statement to run\n policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})"
            },
            "eventSelector": "6de956d2cb2e161f8c91c6ae7b286358c7458d5ad5e26ea2d55330fbe282839c",
            "name": "RunSQL",
            "nameLocation": "1586:6:1",
            "parameters": {
              "id": 62,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "1610:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "1602:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1602:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 54,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "isOwner",
                  "nameLocation": "1631:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "1626:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 53,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1626:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 56,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "1656:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "1648:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 55,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1648:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "statement",
                  "nameLocation": "1680:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "1673:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1673:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "policy",
                  "nameLocation": "1715:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 63,
                  "src": "1699:22:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TablelandPolicy_$16_memory_ptr",
                    "typeString": "struct TablelandPolicy"
                  },
                  "typeName": {
                    "id": 60,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59,
                      "name": "TablelandPolicy",
                      "nameLocations": [
                        "1699:15:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 16,
                      "src": "1699:15:1"
                    },
                    "referencedDeclaration": 16,
                    "src": "1699:15:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TablelandPolicy_$16_storage_ptr",
                      "typeString": "struct TablelandPolicy"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1592:135:1"
            }
          },
          {
            "id": 70,
            "nodeType": "EventDefinition",
            "src": "1923:57:1",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 64,
              "nodeType": "StructuredDocumentation",
              "src": "1734:184:1",
              "text": " @dev Emitted when a table's controller is set.\n tableId - the id of the target table\n controller - the address of the controller (EOA or contract)"
            },
            "eventSelector": "64d442926514e7c17643406b529155919979582e13eee1dfe07cbd088ef2033e",
            "name": "SetController",
            "nameLocation": "1929:13:1",
            "parameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "1951:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1943:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1943:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 68,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "controller",
                  "nameLocation": "1968:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1960:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1960:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1942:37:1"
            }
          },
          {
            "id": 76,
            "nodeType": "StructDefinition",
            "src": "2274:75:1",
            "nodes": [],
            "canonicalName": "ITablelandTables.Statement",
            "documentation": {
              "id": 71,
              "nodeType": "StructuredDocumentation",
              "src": "1986:283:1",
              "text": " @dev Struct containing parameters needed to run a mutating sql statement\n tableId - the id of the target table\n statement - the SQL statement to run\n           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE"
            },
            "members": [
              {
                "constant": false,
                "id": 73,
                "mutability": "mutable",
                "name": "tableId",
                "nameLocation": "2309:7:1",
                "nodeType": "VariableDeclaration",
                "scope": 76,
                "src": "2301:15:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 72,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "2301:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 75,
                "mutability": "mutable",
                "name": "statement",
                "nameLocation": "2333:9:1",
                "nodeType": "VariableDeclaration",
                "scope": 76,
                "src": "2326:16:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 74,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "2326:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Statement",
            "nameLocation": "2281:9:1",
            "scope": 159,
            "visibility": "public"
          },
          {
            "id": 86,
            "nodeType": "FunctionDefinition",
            "src": "2705:113:1",
            "nodes": [],
            "documentation": {
              "id": 77,
              "nodeType": "StructuredDocumentation",
              "src": "2355:345:1",
              "text": " @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\n owner - the to-be owner of the new table\n statement - the SQL statement used to create the table\n           - the statement type must be CREATE\n Requirements:\n - contract must be unpaused"
            },
            "functionSelector": "a15ab08d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "create",
            "nameLocation": "2714:6:1",
            "parameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 79,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "2738:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 86,
                  "src": "2730:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 78,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2730:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 81,
                  "mutability": "mutable",
                  "name": "statement",
                  "nameLocation": "2767:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 86,
                  "src": "2753:23:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 80,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2753:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2720:62:1"
            },
            "returnParameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 84,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 86,
                  "src": "2809:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 83,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2809:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2808:9:1"
            },
            "scope": 159,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 98,
            "nodeType": "FunctionDefinition",
            "src": "3194:127:1",
            "nodes": [],
            "documentation": {
              "id": 87,
              "nodeType": "StructuredDocumentation",
              "src": "2824:365:1",
              "text": " @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\n owner - the to-be owner of the new table\n statements - the SQL statements used to create the tables\n            - each statement type must be CREATE\n Requirements:\n - contract must be unpaused"
            },
            "functionSelector": "61a23d0f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "create",
            "nameLocation": "3203:6:1",
            "parameters": {
              "id": 93,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 89,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "3227:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "3219:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 88,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3219:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 92,
                  "mutability": "mutable",
                  "name": "statements",
                  "nameLocation": "3260:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "3242:28:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 90,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "3242:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 91,
                    "nodeType": "ArrayTypeName",
                    "src": "3242:8:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3209:67:1"
            },
            "returnParameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 96,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "3303:16:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 94,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3303:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 95,
                    "nodeType": "ArrayTypeName",
                    "src": "3303:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3302:18:1"
            },
            "scope": 159,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 108,
            "nodeType": "FunctionDefinition",
            "src": "3958:123:1",
            "nodes": [],
            "documentation": {
              "id": 99,
              "nodeType": "StructuredDocumentation",
              "src": "3327:626:1",
              "text": " @dev Runs a mutating SQL statement for `caller` using `statement`.\n caller - the address that is running the SQL statement\n tableId - the id of the target table\n statement - the SQL statement to run\n           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n Requirements:\n - contract must be unpaused\n - `msg.sender` must be `caller`\n - `tableId` must exist and be the table being mutated\n - `caller` must be authorized by the table controller\n - `statement` must be less than or equal to 35000 bytes"
            },
            "functionSelector": "377af0da",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mutate",
            "nameLocation": "3967:6:1",
            "parameters": {
              "id": 106,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 101,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "3991:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 108,
                  "src": "3983:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3983:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 103,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "4015:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 108,
                  "src": "4007:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 102,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4007:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 105,
                  "mutability": "mutable",
                  "name": "statement",
                  "nameLocation": "4048:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 108,
                  "src": "4032:25:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 104,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4032:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3973:90:1"
            },
            "returnParameters": {
              "id": 107,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4080:0:1"
            },
            "scope": 159,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 118,
            "nodeType": "FunctionDefinition",
            "src": "4940:121:1",
            "nodes": [],
            "documentation": {
              "id": 109,
              "nodeType": "StructuredDocumentation",
              "src": "4087:848:1",
              "text": " @dev Runs an array of mutating SQL statements for `caller`\n caller - the address that is running the SQL statement\n statements - an array of structs containing the id of the target table and coresponding statement\n            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\n Requirements:\n - contract must be unpaused\n - `msg.sender` must be `caller`\n - `tableId` must be the table being muated in each struct's statement\n - `caller` must be authorized by the table controller if the statement is mutating\n - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\n - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization"
            },
            "functionSelector": "abf69aa3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mutate",
            "nameLocation": "4949:6:1",
            "parameters": {
              "id": 116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 111,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "4973:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "4965:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 110,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4965:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 115,
                  "mutability": "mutable",
                  "name": "statements",
                  "nameLocation": "5027:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "4989:48:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Statement_$76_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct ITablelandTables.Statement[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 113,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 112,
                        "name": "ITablelandTables.Statement",
                        "nameLocations": [
                          "4989:16:1",
                          "5006:9:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 76,
                        "src": "4989:26:1"
                      },
                      "referencedDeclaration": 76,
                      "src": "4989:26:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Statement_$76_storage_ptr",
                        "typeString": "struct ITablelandTables.Statement"
                      }
                    },
                    "id": 114,
                    "nodeType": "ArrayTypeName",
                    "src": "4989:28:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Statement_$76_storage_$dyn_storage_ptr",
                      "typeString": "struct ITablelandTables.Statement[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4955:88:1"
            },
            "returnParameters": {
              "id": 117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5060:0:1"
            },
            "scope": 159,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 128,
            "nodeType": "FunctionDefinition",
            "src": "6253:115:1",
            "nodes": [],
            "documentation": {
              "id": 119,
              "nodeType": "StructuredDocumentation",
              "src": "5067:1181:1",
              "text": " @dev Sets the controller for a table. Controller can be an EOA or contract address.\n When a table is created, it's controller is set to the zero address, which means that the\n contract will not enforce write access control. In this situation, validators will not accept\n transactions from non-owners unless explicitly granted access with \"GRANT\" SQL statements.\n When a controller address is set for a table, validators assume write access control is\n handled at the contract level, and will accept all transactions.\n You can unset a controller address for a table by setting it back to the zero address.\n This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\n caller - the address that is setting the controller\n tableId - the id of the target table\n controller - the address of the controller (EOA or contract)\n Requirements:\n - contract must be unpaused\n - `msg.sender` must be `caller` and owner of `tableId`\n - `tableId` must exist\n - `tableId` controller must not be locked"
            },
            "functionSelector": "8bb0ab97",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setController",
            "nameLocation": "6262:13:1",
            "parameters": {
              "id": 126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 121,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "6293:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "6285:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6285:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "6317:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "6309:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6309:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 125,
                  "mutability": "mutable",
                  "name": "controller",
                  "nameLocation": "6342:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "6334:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 124,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6334:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6275:83:1"
            },
            "returnParameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6367:0:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 136,
            "nodeType": "FunctionDefinition",
            "src": "6489:67:1",
            "nodes": [],
            "documentation": {
              "id": 129,
              "nodeType": "StructuredDocumentation",
              "src": "6374:110:1",
              "text": " @dev Returns the controller for a table.\n tableId - the id of the target table"
            },
            "functionSelector": "58edaa9c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getController",
            "nameLocation": "6498:13:1",
            "parameters": {
              "id": 132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 131,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "6520:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 136,
                  "src": "6512:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 130,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6512:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6511:17:1"
            },
            "returnParameters": {
              "id": 135,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 136,
                  "src": "6547:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6547:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6546:9:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 144,
            "nodeType": "FunctionDefinition",
            "src": "7116:66:1",
            "nodes": [],
            "documentation": {
              "id": 137,
              "nodeType": "StructuredDocumentation",
              "src": "6562:549:1",
              "text": " @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\n Although not very useful, it is possible to lock a table controller that is set to the zero address.\n caller - the address that is locking the controller\n tableId - the id of the target table\n Requirements:\n - contract must be unpaused\n - `msg.sender` must be `caller` and owner of `tableId`\n - `tableId` must exist\n - `tableId` controller must not be locked"
            },
            "functionSelector": "05295681",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lockController",
            "nameLocation": "7125:14:1",
            "parameters": {
              "id": 142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 139,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "7148:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 144,
                  "src": "7140:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 138,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7140:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 141,
                  "mutability": "mutable",
                  "name": "tableId",
                  "nameLocation": "7164:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 144,
                  "src": "7156:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 140,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7156:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7139:33:1"
            },
            "returnParameters": {
              "id": 143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7181:0:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 150,
            "nodeType": "FunctionDefinition",
            "src": "7365:52:1",
            "nodes": [],
            "documentation": {
              "id": 145,
              "nodeType": "StructuredDocumentation",
              "src": "7188:172:1",
              "text": " @dev Sets the contract base URI.\n baseURI - the new base URI\n Requirements:\n - `msg.sender` must be contract owner"
            },
            "functionSelector": "55f804b3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setBaseURI",
            "nameLocation": "7374:10:1",
            "parameters": {
              "id": 148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 147,
                  "mutability": "mutable",
                  "name": "baseURI",
                  "nameLocation": "7399:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 150,
                  "src": "7385:21:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 146,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7385:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7384:23:1"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7416:0:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 154,
            "nodeType": "FunctionDefinition",
            "src": "7587:26:1",
            "nodes": [],
            "documentation": {
              "id": 151,
              "nodeType": "StructuredDocumentation",
              "src": "7423:159:1",
              "text": " @dev Pauses the contract.\n Requirements:\n - `msg.sender` must be contract owner\n - contract must be unpaused"
            },
            "functionSelector": "8456cb59",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pause",
            "nameLocation": "7596:5:1",
            "parameters": {
              "id": 152,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7601:2:1"
            },
            "returnParameters": {
              "id": 153,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7612:0:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 158,
            "nodeType": "FunctionDefinition",
            "src": "7783:28:1",
            "nodes": [],
            "documentation": {
              "id": 155,
              "nodeType": "StructuredDocumentation",
              "src": "7619:159:1",
              "text": " @dev Unpauses the contract.\n Requirements:\n - `msg.sender` must be contract owner\n - contract must be paused"
            },
            "functionSelector": "3f4ba83a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unpause",
            "nameLocation": "7792:7:1",
            "parameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7799:2:1"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7810:0:1"
            },
            "scope": 159,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ITablelandTables",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 21,
          "nodeType": "StructuredDocumentation",
          "src": "123:66:1",
          "text": " @dev Interface of a TablelandTables compliant contract."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          159
        ],
        "name": "ITablelandTables",
        "nameLocation": "200:16:1",
        "scope": 160,
        "usedErrors": [
          24,
          31
        ],
        "usedEvents": [
          40,
          49,
          63,
          70
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 1
}