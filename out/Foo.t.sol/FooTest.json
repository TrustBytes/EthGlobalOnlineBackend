{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "err",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "LogAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "value",
          "type": "address[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "value",
          "type": "bool[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "value",
          "type": "bytes32[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "value",
          "type": "int256[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "value",
          "type": "string[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "value",
          "type": "uint256[]"
        }
      ],
      "name": "LogArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "LogBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "LogBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "LogInt256",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "LogNamedAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "value",
          "type": "address[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "value",
          "type": "bool[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "value",
          "type": "bytes32[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "value",
          "type": "int256[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "value",
          "type": "string[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "value",
          "type": "uint256[]"
        }
      ],
      "name": "LogNamedArray",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "LogNamedBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "LogNamedBytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "LogNamedInt256",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "LogNamedString",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogNamedUint256",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "LogString",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogUint256",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testFork_Example",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "testFuzz_Example",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test_Example",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b50610d5e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba414fa611610050578063ba414fa614610091578063e7c38d15146100ad578063fa7626d4146100c057600080fd5b80630a9254e41461007757806353f3cac114610081578063b755d88d14610089575b600080fd5b61007f6100c7565b005b61007f610137565b61007f61024f565b61009961048a565b604051901515815260200160405180910390f35b61007f6100bb366004610a3c565b6105c2565b6001610099565b6040516100d390610a30565b604051809103906000f0801580156100ef573d6000803e3d6000fd5b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101756040518060400160405280600b81526020017f48656c6c6f20576f726c6400000000000000000000000000000000000000000081525061069a565b6008546040517f7d3c40c8000000000000000000000000000000000000000000000000000000008152602a600482018190529161024c9173ffffffffffffffffffffffffffffffffffffffff90911690637d3c40c8906024015b602060405180830381865afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102109190610a55565b826040518060400160405280600e81526020017f76616c7565206d69736d6174636800000000000000000000000000000000000081525061070b565b50565b60408051602081018252600080825291517fd145736c000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9163d145736c916102ac9190600401610abe565b6000604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f39190810190610b34565b905080516000036103015750565b604080517f71ee464d0000000000000000000000000000000000000000000000000000000081526004810191909152600760448201527f6d61696e6e657400000000000000000000000000000000000000000000000000606482015262faabe06024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371ee464d906084016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610a55565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152737713974908be4bed47172370115e8b1219f4a5f06004820181905273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489160009083906370a0823190602401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610a55565b905065b28a738c60196104838282610758565b5050505050565b6000805460ff161561049c5750600190565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105bc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000008284015282518083038401815260608301909352600092909161053f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610be1565b60408051601f198184030181529082905261055991610c29565b6000604051808303816000865af19150503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b509150506000818060200190518101906105b59190610c45565b9392505050565b50600090565b6040517f4c63e5620000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b50506008546040517f7d3c40c80000000000000000000000000000000000000000000000000000000081526004810185905261024c935073ffffffffffffffffffffffffffffffffffffffff9091169150637d3c40c8906024016101cf565b61024c816040516024016106ae9190610c67565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac000000000000000000000000000000000000000000000000000000001790526108c4565b818314610753577f03340b396be03f72c1bb2429a48ffdfe1e8e9edf1948192b4af0e934039a04b1816040516107419190610c7a565b60405180910390a16107538383610758565b505050565b8082146108c0577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab6040516107e49060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e60408201527f743235365d000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a1604080518181526007818301527f2020204c6566740000000000000000000000000000000000000000000000000060608201526020810184905290517fe41397d8de5007c5d2f4564ba72bd2a8a09a8fdb658da682e22bcfa1193bb1d19181900360800190a1604080518181526007818301527f202052696768740000000000000000000000000000000000000000000000000060608201526020810183905290517fe41397d8de5007c5d2f4564ba72bd2a8a09a8fdb658da682e22bcfa1193bb1d19181900360800190a16108c06108cd565b5050565b61024c81610a0f565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b6000036108ec57565b60408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109829291602001610be1565b60408051601f198184030181529082905261099c91610c29565b6000604051808303816000865af19150503d80600081146109d9576040519150601f19603f3d011682016040523d82523d6000602084013e6109de565b606091505b5050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b609080610cc283390190565b600060208284031215610a4e57600080fd5b5035919050565b600060208284031215610a6757600080fd5b5051919050565b60005b83811015610a89578181015183820152602001610a71565b50506000910152565b60008151808452610aaa816020860160208601610a6e565b601f01601f19169290920160200192915050565b60408152600f60408201527f4150495f4b45595f414c4348454d59000000000000000000000000000000000060608201526080602082015260006105b56080830184610a92565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610b4657600080fd5b815167ffffffffffffffff80821115610b5e57600080fd5b818401915084601f830112610b7257600080fd5b815181811115610b8457610b84610b05565b604051601f8201601f19908116603f01168101908382118183101715610bac57610bac610b05565b81604052828152876020848701011115610bc557600080fd5b610bd6836020830160208801610a6e565b979650505050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008316815260008251610c1b816004850160208701610a6e565b919091016004019392505050565b60008251610c3b818460208701610a6e565b9190910192915050565b600060208284031215610c5757600080fd5b815180151581146105b557600080fd5b6020815260006105b56020830184610a92565b60408152600560408201527f4572726f7200000000000000000000000000000000000000000000000000000060608201526080602082015260006105b56080830184610a9256fe6080604052348015600f57600080fd5b5060728061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637d3c40c814602d575b600080fd5b603b6038366004604d565b90565b60405190815260200160405180910390f35b600060208284031215605e57600080fd5b503591905056fea164736f6c6343000815000aa164736f6c6343000815000a",
    "sourceMap": "500:1843:20:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063ba414fa611610050578063ba414fa614610091578063e7c38d15146100ad578063fa7626d4146100c057600080fd5b80630a9254e41461007757806353f3cac114610081578063b755d88d14610089575b600080fd5b61007f6100c7565b005b61007f610137565b61007f61024f565b61009961048a565b604051901515815260200160405180910390f35b61007f6100bb366004610a3c565b6105c2565b6001610099565b6040516100d390610a30565b604051809103906000f0801580156100ef573d6000803e3d6000fd5b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101756040518060400160405280600b81526020017f48656c6c6f20576f726c6400000000000000000000000000000000000000000081525061069a565b6008546040517f7d3c40c8000000000000000000000000000000000000000000000000000000008152602a600482018190529161024c9173ffffffffffffffffffffffffffffffffffffffff90911690637d3c40c8906024015b602060405180830381865afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102109190610a55565b826040518060400160405280600e81526020017f76616c7565206d69736d6174636800000000000000000000000000000000000081525061070b565b50565b60408051602081018252600080825291517fd145736c000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9163d145736c916102ac9190600401610abe565b6000604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f39190810190610b34565b905080516000036103015750565b604080517f71ee464d0000000000000000000000000000000000000000000000000000000081526004810191909152600760448201527f6d61696e6e657400000000000000000000000000000000000000000000000000606482015262faabe06024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371ee464d906084016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610a55565b506040517f70a08231000000000000000000000000000000000000000000000000000000008152737713974908be4bed47172370115e8b1219f4a5f06004820181905273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489160009083906370a0823190602401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610a55565b905065b28a738c60196104838282610758565b5050505050565b6000805460ff161561049c5750600190565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105bc5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000008284015282518083038401815260608301909352600092909161053f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610be1565b60408051601f198184030181529082905261055991610c29565b6000604051808303816000865af19150503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b509150506000818060200190518101906105b59190610c45565b9392505050565b50600090565b6040517f4c63e5620000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240160006040518083038186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b50506008546040517f7d3c40c80000000000000000000000000000000000000000000000000000000081526004810185905261024c935073ffffffffffffffffffffffffffffffffffffffff9091169150637d3c40c8906024016101cf565b61024c816040516024016106ae9190610c67565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac000000000000000000000000000000000000000000000000000000001790526108c4565b818314610753577f03340b396be03f72c1bb2429a48ffdfe1e8e9edf1948192b4af0e934039a04b1816040516107419190610c7a565b60405180910390a16107538383610758565b505050565b8082146108c0577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab6040516107e49060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e60408201527f743235365d000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a1604080518181526007818301527f2020204c6566740000000000000000000000000000000000000000000000000060608201526020810184905290517fe41397d8de5007c5d2f4564ba72bd2a8a09a8fdb658da682e22bcfa1193bb1d19181900360800190a1604080518181526007818301527f202052696768740000000000000000000000000000000000000000000000000060608201526020810183905290517fe41397d8de5007c5d2f4564ba72bd2a8a09a8fdb658da682e22bcfa1193bb1d19181900360800190a16108c06108cd565b5050565b61024c81610a0f565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b6000036108ec57565b60408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109829291602001610be1565b60408051601f198184030181529082905261099c91610c29565b6000604051808303816000865af19150503d80600081146109d9576040519150601f19603f3d011682016040523d82523d6000602084013e6109de565b606091505b5050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b609080610cc283390190565b600060208284031215610a4e57600080fd5b5035919050565b600060208284031215610a6757600080fd5b5051919050565b60005b83811015610a89578181015183820152602001610a71565b50506000910152565b60008151808452610aaa816020860160208601610a6e565b601f01601f19169290920160200192915050565b60408152600f60408201527f4150495f4b45595f414c4348454d59000000000000000000000000000000000060608201526080602082015260006105b56080830184610a92565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610b4657600080fd5b815167ffffffffffffffff80821115610b5e57600080fd5b818401915084601f830112610b7257600080fd5b815181811115610b8457610b84610b05565b604051601f8201601f19908116603f01168101908382118183101715610bac57610bac610b05565b81604052828152876020848701011115610bc557600080fd5b610bd6836020830160208801610a6e565b979650505050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008316815260008251610c1b816004850160208701610a6e565b919091016004019392505050565b60008251610c3b818460208701610a6e565b9190910192915050565b600060208284031215610c5757600080fd5b815180151581146105b557600080fd5b6020815260006105b56020830184610a92565b60408152600560408201527f4572726f7200000000000000000000000000000000000000000000000000000060608201526080602082015260006105b56080830184610a9256fe6080604052348015600f57600080fd5b5060728061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637d3c40c814602d575b600080fd5b603b6038366004604d565b90565b60405190815260200160405180910390f35b600060208284031215605e57600080fd5b503591905056fea164736f6c6343000815000aa164736f6c6343000815000a",
    "sourceMap": "500:1843:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;630:112;;;:::i;:::-;;827:151;;;:::i;1632:709::-;;;:::i;4324:564:15:-;;;:::i;:::-;;;179:14:21;;172:22;154:41;;142:2;127:18;4324:564:15;;;;;;;1266:157:20;;;;;;:::i;:::-;;:::i;2763:84:15:-;2836:4;2763:84;;630:112:20;726:9;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;720:3:20;:15;;;;;;;;;;;;;;;630:112::o;827:151::-;870:27;;;;;;;;;;;;;;;;;;:12;:27::i;:::-;940:3;;:9;;;;;919:2;940:9;;;537:25:21;;;919:2:20;931:40;;940:3;;;;;:6;;510:18:21;;940:9:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;951:1;931:40;;;;;;;;;;;;;;;;;:8;:40::i;:::-;860:118;827:151::o;1632:709::-;1796:10;;;;;;;;1738:27;1796:10;;;1768:39;;;;;:8;;;;:39;;1796:10;1768:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1768:39:20;;;;;;;;;;;;:::i;:::-;1738:69;;1827:13;1821:27;1852:1;1821:32;1817:69;;1869:7;1632:709::o;1817:69::-;1957:71;;;;;;;;;3191:21:21;;;;3248:1;3228:18;;;3221:29;3286:9;3266:18;;;3259:37;2015:10:20;3348:20:21;;;3341:36;1957:19:20;;;;3313::21;;1957:71:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2198:30:20;;;;;2122:42;2198:30;;;3534:74:21;;;2053:42:20;;2038:12;;2053:42;;2198:22;;3507:18:21;;2198:30:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2174:54;-1:-1:-1;2264:20:20;2294:40;2174:54;2264:20;2294:8;:40::i;:::-;1669:672;;;;;1632:709::o;4324:564:15:-;4358:4;4378:7;;;;4374:49;;;-1:-1:-1;4408:4:15;;4324:564::o;4374:49::-;4509:22;;:26;4505:377;;4675:41;;;4581:15;4675:41;;;3793:74:21;;;4698:17:15;3883:18:21;;;3876:34;4675:41:15;;;;;;;;;3766:18:21;;;4675:41:15;;;-1:-1:-1;;4581:15:15;;4614:103;;4638:34;;4614:103;;;:::i;:::-;;;;-1:-1:-1;;4614:103:15;;;;;;;;;;4581:150;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:180;;;4745:17;4776:10;4765:30;;;;;;;;;;;;:::i;:::-;4745:50;4324:564;-1:-1:-1;;;4324:564:15:o;4505:377::-;-1:-1:-1;4866:5:15;;4324:564::o;1266:157:20:-;1322:17;;;;;1332:6;;;1322:17;;;154:41:21;1322:9:20;;;;127:18:21;;1322:17:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1385:3:20;;:9;;;;;;;;537:25:21;;;1376:40:20;;-1:-1:-1;1385:3:20;;;;;-1:-1:-1;1385:6:20;;510:18:21;;1385:9:20;391:177:21;6598:121:11;6653:59;6708:2;6669:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6669:42:11;;;;;;;;;;;;;;;;;;;;6653:15;:59::i;17234:190:15:-;17329:1;17324;:6;17320:98;;17351:28;17375:3;17351:28;;;;;;:::i;:::-;;;;;;;;17393:14;17402:1;17405;17393:8;:14::i;:::-;17234:190;;;:::o;16844:275::-;16920:1;16915;:6;16911:202;;16942:44;;;;;5808:2:21;5790:21;;;5847:2;5827:18;;;5820:30;5886:34;5881:2;5866:18;;5859:62;5957:7;5952:2;5937:18;;5930:35;5997:3;5982:19;;5606:401;16942:44:15;;;;;;;;17005:29;;;6224:21:21;;;6281:1;6261:18;;;6254:29;6319:9;6314:2;6299:18;;6292:37;6396:4;6381:20;;6374:36;;;17005:29:15;;;;;;;6361:3:21;17005:29:15;;;17053;;;6633:21:21;;;6690:1;6670:18;;;6663:29;6728:9;6723:2;6708:18;;6701:37;6805:4;6790:20;;6783:36;;;17053:29:15;;;;;;;6770:3:21;17053:29:15;;;17096:6;:4;:6::i;:::-;16844:275;;:::o;868:133:11:-;939:55;986:7;965:19;939:55::i;5197:636:15:-;5287:22;;3540:37;5287:27;5283:64;;5197:636::o;5283:64::-;5581:65;;;5449:15;5581:65;;;7032:74:21;;;5604:17:15;7122:18:21;;;7115:34;;;;5639:4:15;7165:18:21;;;7158:34;5433:11:15;;5449:15;5519:43;;7005:18:21;;5581:65:15;;;-1:-1:-1;;5581:65:15;;;;;;;;;;5478:182;;;5581:65;5478:182;;:::i;:::-;;;;-1:-1:-1;;5478:182:15;;;;;;;;;;5449:221;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5812:7:15;:14;;;;5822:4;5812:14;;;-1:-1:-1;;5197:636:15:o;1007:380:11:-;1105:14;;591:42;1278:2;1265:16;;1081:21;;1105:14;1265:16;591:42;1314:5;1303:68;1294:77;;1231:150;;1007:380;:::o;-1:-1:-1:-;;;;;;;;:::o;206:180:21:-;265:6;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;-1:-1:-1;357:23:21;;206:180;-1:-1:-1;206:180:21:o;573:184::-;643:6;696:2;684:9;675:7;671:23;667:32;664:52;;;712:1;709;702:12;664:52;-1:-1:-1;735:16:21;;573:184;-1:-1:-1;573:184:21:o;762:250::-;847:1;857:113;871:6;868:1;865:13;857:113;;;947:11;;;941:18;928:11;;;921:39;893:2;886:10;857:113;;;-1:-1:-1;;1004:1:21;986:16;;979:27;762:250::o;1017:330::-;1059:3;1097:5;1091:12;1124:6;1119:3;1112:19;1140:76;1209:6;1202:4;1197:3;1193:14;1186:4;1179:5;1175:16;1140:76;:::i;:::-;1261:2;1249:15;-1:-1:-1;;1245:88:21;1236:98;;;;1336:4;1232:109;;1017:330;-1:-1:-1;;1017:330:21:o;1352:457::-;1602:2;1591:9;1584:21;1641:2;1636;1625:9;1621:18;1614:30;1680:17;1675:2;1664:9;1660:18;1653:45;1736:3;1729:4;1718:9;1714:20;1707:33;1565:4;1757:46;1798:3;1787:9;1783:19;1775:6;1757:46;:::i;1814:184::-;1866:77;1863:1;1856:88;1963:4;1960:1;1953:15;1987:4;1984:1;1977:15;2003:956;2083:6;2136:2;2124:9;2115:7;2111:23;2107:32;2104:52;;;2152:1;2149;2142:12;2104:52;2185:9;2179:16;2214:18;2255:2;2247:6;2244:14;2241:34;;;2271:1;2268;2261:12;2241:34;2309:6;2298:9;2294:22;2284:32;;2354:7;2347:4;2343:2;2339:13;2335:27;2325:55;;2376:1;2373;2366:12;2325:55;2405:2;2399:9;2427:2;2423;2420:10;2417:36;;;2433:18;;:::i;:::-;2567:2;2561:9;2629:4;2621:13;;-1:-1:-1;;2617:22:21;;;2641:2;2613:31;2609:40;2597:53;;;2665:18;;;2685:22;;;2662:46;2659:72;;;2711:18;;:::i;:::-;2751:10;2747:2;2740:22;2786:2;2778:6;2771:18;2826:7;2821:2;2816;2812;2808:11;2804:20;2801:33;2798:53;;;2847:1;2844;2837:12;2798:53;2860:68;2925:2;2920;2912:6;2908:15;2903:2;2899;2895:11;2860:68;:::i;:::-;2947:6;2003:956;-1:-1:-1;;;;;;;2003:956:21:o;3921:430::-;4118:66;4110:6;4106:79;4101:3;4094:92;4076:3;4215:6;4209:13;4231:74;4298:6;4294:1;4289:3;4285:11;4278:4;4270:6;4266:17;4231:74;:::i;:::-;4325:16;;;;4343:1;4321:24;;3921:430;-1:-1:-1;;;3921:430:21:o;4356:287::-;4485:3;4523:6;4517:13;4539:66;4598:6;4593:3;4586:4;4578:6;4574:17;4539:66;:::i;:::-;4621:16;;;;;4356:287;-1:-1:-1;;4356:287:21:o;4648:277::-;4715:6;4768:2;4756:9;4747:7;4743:23;4739:32;4736:52;;;4784:1;4781;4774:12;4736:52;4816:9;4810:16;4869:5;4862:13;4855:21;4848:5;4845:32;4835:60;;4891:1;4888;4881:12;4930:220;5079:2;5068:9;5061:21;5042:4;5099:45;5140:2;5129:9;5125:18;5117:6;5099:45;:::i;5155:446::-;5405:2;5394:9;5387:21;5444:1;5439:2;5428:9;5424:18;5417:29;5482:7;5477:2;5466:9;5462:18;5455:35;5528:3;5521:4;5510:9;5506:20;5499:33;5368:4;5549:46;5590:3;5579:9;5575:19;5567:6;5549:46;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_TEST()": "fa7626d4",
    "failed()": "ba414fa6",
    "setUp()": "0a9254e4",
    "testFork_Example()": "b755d88d",
    "testFuzz_Example(uint256)": "e7c38d15",
    "test_Example()": "53f3cac1"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"LogArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"LogBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"LogNamedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"name\":\"LogNamedArray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"LogNamedBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"LogNamedBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"LogNamedInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"LogNamedString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNamedUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"LogString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFork_Example\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"testFuzz_Example\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_Example\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"If this is your first time with Forge, read this tutorial in the Foundry Book: https://book.getfoundry.sh/forge/writing-tests\",\"kind\":\"dev\",\"methods\":{\"IS_TEST()\":{\"details\":\"A flag to indicate that this is a test contract.\"},\"failed()\":{\"details\":\"Checks whether any test has failed so far. In addition to the local failure flag, we look for the global flag in the HEVM contract at storage slot \\\"failed\\\", because it is possible to run assertions between different instances of PRBTest. See https://github.com/dapphub/dapptools/issues/768.\"},\"setUp()\":{\"details\":\"A function invoked before each test case is run.\"},\"testFork_Example()\":{\"details\":\"Fork test that runs against an Ethereum Mainnet fork. For this to work, you need to set `API_KEY_ALCHEMY` in your environment You can get an API key for free at https://alchemy.com.\"},\"testFuzz_Example(uint256)\":{\"details\":\"Fuzz test that provides random values for an unsigned integer, but which rejects zero as an input. If you need more sophisticated input validation, you should use the `bound` utility instead. See https://twitter.com/PaulRBerg/status/1622558791685242880\"},\"test_Example()\":{\"details\":\"Basic test. Run it with `forge test -vvv` to see the console log.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/Foo.t.sol\":\"FooTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@prb/test/=lib/prb-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":prb-test/=lib/prb-test/src/\"]},\"sources\":{\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a\",\"dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26\",\"dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xb569d0b4398fad95f508fb854e832143edf69a897af4250f5f60fe195a2066c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://84b722ada97ea7bb841cdc0fa556aa36a02ff2d380fa24f6dc0717a71c6d9c7c\",\"dweb:/ipfs/QmfCH9Q4tvJhPM286GFsE4UCP4YncLpRu4Nwa2ZkHdRfbw\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/prb-test/src/Helpers.sol\":{\"keccak256\":\"0x4ab5888920e97cb50dff6a7093fd01d830aa8b7f1e3d5313f73e46f812360705\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ecaffd6d742a3c47c3785e9816d1d459d45cb6bf34a353884d333b87d52fa60\",\"dweb:/ipfs/QmYjsof64dPbxxw4i95S9bqDvTF4V2DA35bSwYAvXxxXYp\"]},\"lib/prb-test/src/PRBTest.sol\":{\"keccak256\":\"0xed6d9f8c7fd5ca380a47a6de7c631d48a96cbc777632d030a52bf9216aea0bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcf663e0c2e2d3eabdaa1c9e7ff4df2a3b046e1279de1e0d2ce24a87a86e37fb\",\"dweb:/ipfs/QmRnar3CcN2JMYqrDYkUqEya6A3vBWUrD2HSL8aP7FC4vK\"]},\"lib/prb-test/src/Vm.sol\":{\"keccak256\":\"0xecae57742478cd465460cc2ec5fd9174a41e5b93549c1d4456ff26cf97356fee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fdf31f7f585bebfde82af93eb295e18196362704e69338e0626c2d8015d00e9d\",\"dweb:/ipfs/Qme1oLTN5CxRRiuVw48oN5buYotdaKNnio7a9W4hAus9Ry\"]},\"src/Foo.sol\":{\"keccak256\":\"0xb51e15ecb958161a12c4d4db19fa506a58476edb7d152bfadd0d2faea6302e70\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c80657c52f6ec316e90b406f1311f25a122cb9b56c93555e617c08ba1dc70c60\",\"dweb:/ipfs/QmP7E3kwGviu3TJZZZM2GunmE5BYU3uwxkKNszYHcgqubY\"]},\"test/Foo.t.sol\":{\"keccak256\":\"0xcd4fc252255b3c010315254ff667e55f7a22d6c6fc05b815daf35c27d180270b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://6d8c53046a22b630c9476871c206dab776cceae644138cffefa1bcb28630c94f\",\"dweb:/ipfs/QmSobauE2ixeiZfjFEPD6jxftZMEwVe5tfL4xFEUSKk65x\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "err",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "value",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogAddress",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "value",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool[]",
              "name": "value",
              "type": "bool[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "value",
              "type": "bytes32[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "value",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string[]",
              "name": "value",
              "type": "string[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "value",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogBytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "value",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogBytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "value",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogInt256",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "value",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedAddress",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "value",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bool[]",
              "name": "value",
              "type": "bool[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32[]",
              "name": "value",
              "type": "bytes32[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "value",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string[]",
              "name": "value",
              "type": "string[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "value",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedArray",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedBytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "value",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedBytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "value",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedInt256",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "value",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedString",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogNamedUint256",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "value",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogString",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LogUint256",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFork_Example"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFuzz_Example"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "test_Example"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "IS_TEST()": {
            "details": "A flag to indicate that this is a test contract."
          },
          "failed()": {
            "details": "Checks whether any test has failed so far. In addition to the local failure flag, we look for the global flag in the HEVM contract at storage slot \"failed\", because it is possible to run assertions between different instances of PRBTest. See https://github.com/dapphub/dapptools/issues/768."
          },
          "setUp()": {
            "details": "A function invoked before each test case is run."
          },
          "testFork_Example()": {
            "details": "Fork test that runs against an Ethereum Mainnet fork. For this to work, you need to set `API_KEY_ALCHEMY` in your environment You can get an API key for free at https://alchemy.com."
          },
          "testFuzz_Example(uint256)": {
            "details": "Fuzz test that provides random values for an unsigned integer, but which rejects zero as an input. If you need more sophisticated input validation, you should use the `bound` utility instead. See https://twitter.com/PaulRBerg/status/1622558791685242880"
          },
          "test_Example()": {
            "details": "Basic test. Run it with `forge test -vvv` to see the console log."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@prb/test/=lib/prb-test/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "prb-test/=lib/prb-test/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "test/Foo.t.sol": "FooTest"
      },
      "libraries": {}
    },
    "sources": {
      "lib/forge-std/src/StdCheats.sol": {
        "keccak256": "0x2e1b4b99283c16efaf155f7e55ea357943cf6e61fc02aad060534349f63b6cd5",
        "urls": [
          "bzz-raw://d471a35903e8a367a145ca5b5955caf691c723fe1117c6dcffd928d9f8d7c95a",
          "dweb:/ipfs/QmXGnFUGiX9APL8xit7NZQEYBoEL3wWyW1YyFoJQd2pGPe"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/StdStorage.sol": {
        "keccak256": "0x391a28a2e54aea51a6fb03a3a48035304ca4d24bc669ddf3d4c152c7162e514d",
        "urls": [
          "bzz-raw://475fd0d87ccb0fdc4418dea2babffb4adb4aafb817e61f7ef31c2303f10c6c26",
          "dweb:/ipfs/QmQgcgtZxpkW6DRmbJszN1F8mU6zhaTZGdWWsj77yCuWN9"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/Vm.sol": {
        "keccak256": "0xb569d0b4398fad95f508fb854e832143edf69a897af4250f5f60fe195a2066c5",
        "urls": [
          "bzz-raw://84b722ada97ea7bb841cdc0fa556aa36a02ff2d380fa24f6dc0717a71c6d9c7c",
          "dweb:/ipfs/QmfCH9Q4tvJhPM286GFsE4UCP4YncLpRu4Nwa2ZkHdRfbw"
        ],
        "license": "MIT"
      },
      "lib/forge-std/src/console2.sol": {
        "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
        "urls": [
          "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
          "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
        ],
        "license": "MIT"
      },
      "lib/prb-test/src/Helpers.sol": {
        "keccak256": "0x4ab5888920e97cb50dff6a7093fd01d830aa8b7f1e3d5313f73e46f812360705",
        "urls": [
          "bzz-raw://0ecaffd6d742a3c47c3785e9816d1d459d45cb6bf34a353884d333b87d52fa60",
          "dweb:/ipfs/QmYjsof64dPbxxw4i95S9bqDvTF4V2DA35bSwYAvXxxXYp"
        ],
        "license": "MIT"
      },
      "lib/prb-test/src/PRBTest.sol": {
        "keccak256": "0xed6d9f8c7fd5ca380a47a6de7c631d48a96cbc777632d030a52bf9216aea0bf1",
        "urls": [
          "bzz-raw://dcf663e0c2e2d3eabdaa1c9e7ff4df2a3b046e1279de1e0d2ce24a87a86e37fb",
          "dweb:/ipfs/QmRnar3CcN2JMYqrDYkUqEya6A3vBWUrD2HSL8aP7FC4vK"
        ],
        "license": "MIT"
      },
      "lib/prb-test/src/Vm.sol": {
        "keccak256": "0xecae57742478cd465460cc2ec5fd9174a41e5b93549c1d4456ff26cf97356fee",
        "urls": [
          "bzz-raw://fdf31f7f585bebfde82af93eb295e18196362704e69338e0626c2d8015d00e9d",
          "dweb:/ipfs/Qme1oLTN5CxRRiuVw48oN5buYotdaKNnio7a9W4hAus9Ry"
        ],
        "license": "MIT"
      },
      "src/Foo.sol": {
        "keccak256": "0xb51e15ecb958161a12c4d4db19fa506a58476edb7d152bfadd0d2faea6302e70",
        "urls": [
          "bzz-raw://c80657c52f6ec316e90b406f1311f25a122cb9b56c93555e617c08ba1dc70c60",
          "dweb:/ipfs/QmP7E3kwGviu3TJZZZM2GunmE5BYU3uwxkKNszYHcgqubY"
        ],
        "license": "UNLICENSED"
      },
      "test/Foo.t.sol": {
        "keccak256": "0xcd4fc252255b3c010315254ff667e55f7a22d6c6fc05b815daf35c27d180270b",
        "urls": [
          "bzz-raw://6d8c53046a22b630c9476871c206dab776cceae644138cffefa1bcb28630c94f",
          "dweb:/ipfs/QmSobauE2ixeiZfjFEPD6jxftZMEwVe5tfL4xFEUSKk65x"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/Foo.t.sol",
    "id": 44582,
    "exportedSymbols": {
      "Foo": [
        44435
      ],
      "FooTest": [
        44581
      ],
      "IERC20": [
        44453
      ],
      "PRBTest": [
        42713
      ],
      "StdCheats": [
        3624
      ],
      "console2": [
        25602
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:2305:20",
    "nodes": [
      {
        "id": 44437,
        "nodeType": "PragmaDirective",
        "src": "39:32:20",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".21",
          "<",
          "0.9",
          ".0"
        ]
      },
      {
        "id": 44439,
        "nodeType": "ImportDirective",
        "src": "73:48:20",
        "nodes": [],
        "absolutePath": "lib/prb-test/src/PRBTest.sol",
        "file": "@prb/test/PRBTest.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44582,
        "sourceUnit": 42714,
        "symbolAliases": [
          {
            "foreign": {
              "id": 44438,
              "name": "PRBTest",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 42713,
              "src": "82:7:20",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 44441,
        "nodeType": "ImportDirective",
        "src": "122:50:20",
        "nodes": [],
        "absolutePath": "lib/forge-std/src/console2.sol",
        "file": "forge-std/console2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44582,
        "sourceUnit": 25603,
        "symbolAliases": [
          {
            "foreign": {
              "id": 44440,
              "name": "console2",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25602,
              "src": "131:8:20",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 44443,
        "nodeType": "ImportDirective",
        "src": "173:52:20",
        "nodes": [],
        "absolutePath": "lib/forge-std/src/StdCheats.sol",
        "file": "forge-std/StdCheats.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44582,
        "sourceUnit": 3625,
        "symbolAliases": [
          {
            "foreign": {
              "id": 44442,
              "name": "StdCheats",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3624,
              "src": "182:9:20",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 44445,
        "nodeType": "ImportDirective",
        "src": "227:37:20",
        "nodes": [],
        "absolutePath": "src/Foo.sol",
        "file": "../src/Foo.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44582,
        "sourceUnit": 44436,
        "symbolAliases": [
          {
            "foreign": {
              "id": 44444,
              "name": "Foo",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 44435,
              "src": "236:3:20",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 44453,
        "nodeType": "ContractDefinition",
        "src": "266:93:20",
        "nodes": [
          {
            "id": 44452,
            "nodeType": "FunctionDefinition",
            "src": "289:68:20",
            "nodes": [],
            "functionSelector": "70a08231",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "298:9:20",
            "parameters": {
              "id": 44448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44447,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "316:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 44452,
                  "src": "308:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44446,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "308:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "307:17:20"
            },
            "returnParameters": {
              "id": 44451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44450,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 44452,
                  "src": "348:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44449,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "348:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "347:9:20"
            },
            "scope": 44453,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          44453
        ],
        "name": "IERC20",
        "nameLocation": "276:6:20",
        "scope": 44582,
        "usedErrors": [],
        "usedEvents": []
      },
      {
        "id": 44581,
        "nodeType": "ContractDefinition",
        "src": "500:1843:20",
        "nodes": [
          {
            "id": 44461,
            "nodeType": "VariableDeclaration",
            "src": "545:16:20",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "foo",
            "nameLocation": "558:3:20",
            "scope": 44581,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Foo_$44435",
              "typeString": "contract Foo"
            },
            "typeName": {
              "id": 44460,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 44459,
                "name": "Foo",
                "nameLocations": [
                  "545:3:20"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 44435,
                "src": "545:3:20"
              },
              "referencedDeclaration": 44435,
              "src": "545:3:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Foo_$44435",
                "typeString": "contract Foo"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 44473,
            "nodeType": "FunctionDefinition",
            "src": "630:112:20",
            "nodes": [],
            "body": {
              "id": 44472,
              "nodeType": "Block",
              "src": "662:80:20",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 44470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 44465,
                      "name": "foo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44461,
                      "src": "720:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Foo_$44435",
                        "typeString": "contract Foo"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 44468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "726:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Foo_$44435_$",
                          "typeString": "function () returns (contract Foo)"
                        },
                        "typeName": {
                          "id": 44467,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 44466,
                            "name": "Foo",
                            "nameLocations": [
                              "730:3:20"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 44435,
                            "src": "730:3:20"
                          },
                          "referencedDeclaration": 44435,
                          "src": "730:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Foo_$44435",
                            "typeString": "contract Foo"
                          }
                        }
                      },
                      "id": 44469,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "726:9:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Foo_$44435",
                        "typeString": "contract Foo"
                      }
                    },
                    "src": "720:15:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Foo_$44435",
                      "typeString": "contract Foo"
                    }
                  },
                  "id": 44471,
                  "nodeType": "ExpressionStatement",
                  "src": "720:15:20"
                }
              ]
            },
            "documentation": {
              "id": 44462,
              "nodeType": "StructuredDocumentation",
              "src": "568:57:20",
              "text": "@dev A function invoked before each test case is run."
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "639:5:20",
            "parameters": {
              "id": 44463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "644:2:20"
            },
            "returnParameters": {
              "id": 44464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "662:0:20"
            },
            "scope": 44581,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 44497,
            "nodeType": "FunctionDefinition",
            "src": "827:151:20",
            "nodes": [],
            "body": {
              "id": 44496,
              "nodeType": "Block",
              "src": "860:118:20",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "48656c6c6f20576f726c64",
                        "id": 44480,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "883:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba",
                          "typeString": "literal_string \"Hello World\""
                        },
                        "value": "Hello World"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_592fa743889fc7f92ac2a37bb1f5ba1daf2a5c84741ca0e0061d243a2e6707ba",
                          "typeString": "literal_string \"Hello World\""
                        }
                      ],
                      "expression": {
                        "id": 44477,
                        "name": "console2",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25602,
                        "src": "870:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console2_$25602_$",
                          "typeString": "type(library console2)"
                        }
                      },
                      "id": 44479,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "879:3:20",
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 18116,
                      "src": "870:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 44481,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "870:27:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44482,
                  "nodeType": "ExpressionStatement",
                  "src": "870:27:20"
                },
                {
                  "assignments": [
                    44484
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44484,
                      "mutability": "mutable",
                      "name": "x",
                      "nameLocation": "915:1:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44496,
                      "src": "907:9:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 44483,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "907:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44486,
                  "initialValue": {
                    "hexValue": "3432",
                    "id": 44485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "919:2:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_42_by_1",
                      "typeString": "int_const 42"
                    },
                    "value": "42"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "907:14:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 44490,
                            "name": "x",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44484,
                            "src": "947:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 44488,
                            "name": "foo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44461,
                            "src": "940:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Foo_$44435",
                              "typeString": "contract Foo"
                            }
                          },
                          "id": 44489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "944:2:20",
                          "memberName": "id",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 44434,
                          "src": "940:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 44491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "940:9:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 44492,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44484,
                        "src": "951:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "76616c7565206d69736d61746368",
                        "id": 44493,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "954:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7751e5e526b2328b6bcb95abb71083ab9494d56ba4b478aaf40eba9688e65b52",
                          "typeString": "literal_string \"value mismatch\""
                        },
                        "value": "value mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7751e5e526b2328b6bcb95abb71083ab9494d56ba4b478aaf40eba9688e65b52",
                          "typeString": "literal_string \"value mismatch\""
                        }
                      ],
                      "id": 44487,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        40154,
                        40180,
                        40223,
                        40261,
                        40298,
                        40324,
                        40360,
                        40391,
                        40425,
                        40454,
                        40485,
                        40511,
                        40547,
                        40578,
                        40609,
                        40635,
                        40671,
                        40702,
                        40736,
                        40765,
                        40801,
                        40832,
                        40863,
                        40889,
                        40925,
                        40956
                      ],
                      "referencedDeclaration": 40889,
                      "src": "931:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 44494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "931:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44495,
                  "nodeType": "ExpressionStatement",
                  "src": "931:40:20"
                }
              ]
            },
            "documentation": {
              "id": 44474,
              "nodeType": "StructuredDocumentation",
              "src": "748:74:20",
              "text": "@dev Basic test. Run it with `forge test -vvv` to see the console log."
            },
            "functionSelector": "53f3cac1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_Example",
            "nameLocation": "836:12:20",
            "parameters": {
              "id": 44475,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "848:2:20"
            },
            "returnParameters": {
              "id": 44476,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "860:0:20"
            },
            "scope": 44581,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 44521,
            "nodeType": "FunctionDefinition",
            "src": "1266:157:20",
            "nodes": [],
            "body": {
              "id": 44520,
              "nodeType": "Block",
              "src": "1312:111:20",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 44508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 44506,
                          "name": "x",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44500,
                          "src": "1332:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 44507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1337:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1332:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 44503,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39933,
                        "src": "1322:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$44312",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 44505,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1325:6:20",
                      "memberName": "assume",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 42781,
                      "src": "1322:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure external"
                      }
                    },
                    "id": 44509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1322:17:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44510,
                  "nodeType": "ExpressionStatement",
                  "src": "1322:17:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 44514,
                            "name": "x",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44500,
                            "src": "1392:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 44512,
                            "name": "foo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44461,
                            "src": "1385:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Foo_$44435",
                              "typeString": "contract Foo"
                            }
                          },
                          "id": 44513,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1389:2:20",
                          "memberName": "id",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 44434,
                          "src": "1385:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure external returns (uint256)"
                          }
                        },
                        "id": 44515,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1385:9:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 44516,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44500,
                        "src": "1396:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "76616c7565206d69736d61746368",
                        "id": 44517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1399:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7751e5e526b2328b6bcb95abb71083ab9494d56ba4b478aaf40eba9688e65b52",
                          "typeString": "literal_string \"value mismatch\""
                        },
                        "value": "value mismatch"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7751e5e526b2328b6bcb95abb71083ab9494d56ba4b478aaf40eba9688e65b52",
                          "typeString": "literal_string \"value mismatch\""
                        }
                      ],
                      "id": 44511,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        40154,
                        40180,
                        40223,
                        40261,
                        40298,
                        40324,
                        40360,
                        40391,
                        40425,
                        40454,
                        40485,
                        40511,
                        40547,
                        40578,
                        40609,
                        40635,
                        40671,
                        40702,
                        40736,
                        40765,
                        40801,
                        40832,
                        40863,
                        40889,
                        40925,
                        40956
                      ],
                      "referencedDeclaration": 40889,
                      "src": "1376:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,string memory)"
                      }
                    },
                    "id": 44518,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1376:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44519,
                  "nodeType": "ExpressionStatement",
                  "src": "1376:40:20"
                }
              ]
            },
            "documentation": {
              "id": 44498,
              "nodeType": "StructuredDocumentation",
              "src": "984:277:20",
              "text": "@dev Fuzz test that provides random values for an unsigned integer, but which rejects zero as an input.\n If you need more sophisticated input validation, you should use the `bound` utility instead.\n See https://twitter.com/PaulRBerg/status/1622558791685242880"
            },
            "functionSelector": "e7c38d15",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFuzz_Example",
            "nameLocation": "1275:16:20",
            "parameters": {
              "id": 44501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44500,
                  "mutability": "mutable",
                  "name": "x",
                  "nameLocation": "1300:1:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 44521,
                  "src": "1292:9:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44499,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1292:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1291:11:20"
            },
            "returnParameters": {
              "id": 44502,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1312:0:20"
            },
            "scope": 44581,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 44580,
            "nodeType": "FunctionDefinition",
            "src": "1632:709:20",
            "nodes": [],
            "body": {
              "id": 44579,
              "nodeType": "Block",
              "src": "1669:672:20",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    44526
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44526,
                      "mutability": "mutable",
                      "name": "alchemyApiKey",
                      "nameLocation": "1752:13:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44579,
                      "src": "1738:27:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 44525,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1738:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44535,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "4150495f4b45595f414c4348454d59",
                        "id": 44529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1777:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_582fd81f5a2eb94f8d98379034d6231b1779b1f0f6458e9a62330c5fe4904b32",
                          "typeString": "literal_string \"API_KEY_ALCHEMY\""
                        },
                        "value": "API_KEY_ALCHEMY"
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 44532,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1803:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "id": 44531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1796:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                            "typeString": "type(string storage pointer)"
                          },
                          "typeName": {
                            "id": 44530,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "1796:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 44533,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1796:10:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_582fd81f5a2eb94f8d98379034d6231b1779b1f0f6458e9a62330c5fe4904b32",
                          "typeString": "literal_string \"API_KEY_ALCHEMY\""
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "expression": {
                        "id": 44527,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39933,
                        "src": "1768:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$44312",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 44528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1771:5:20",
                      "memberName": "envOr",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43023,
                      "src": "1768:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) external returns (string memory)"
                      }
                    },
                    "id": 44534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1768:39:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1738:69:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 44542,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 44538,
                            "name": "alchemyApiKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44526,
                            "src": "1827:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 44537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1821:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 44536,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "1821:5:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 44539,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1821:20:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 44540,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1842:6:20",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1821:27:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 44541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1852:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1821:32:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 44545,
                  "nodeType": "IfStatement",
                  "src": "1817:69:20",
                  "trueBody": {
                    "id": 44544,
                    "nodeType": "Block",
                    "src": "1855:31:20",
                    "statements": [
                      {
                        "functionReturnParameters": 44524,
                        "id": 44543,
                        "nodeType": "Return",
                        "src": "1869:7:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "6d61696e6e6574",
                        "id": 44549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1991:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7beafa94c8bfb8f1c1a43104a34f72c524268aafbfe83bff17485539345c66ff",
                          "typeString": "literal_string \"mainnet\""
                        },
                        "value": "mainnet"
                      },
                      {
                        "hexValue": "31365f3432385f303030",
                        "id": 44550,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2015:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_16428000_by_1",
                          "typeString": "int_const 16428000"
                        },
                        "value": "16_428_000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_7beafa94c8bfb8f1c1a43104a34f72c524268aafbfe83bff17485539345c66ff",
                          "typeString": "literal_string \"mainnet\""
                        },
                        {
                          "typeIdentifier": "t_rational_16428000_by_1",
                          "typeString": "int_const 16428000"
                        }
                      ],
                      "expression": {
                        "id": 44546,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39933,
                        "src": "1957:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$44312",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 44548,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1960:16:20",
                      "memberName": "createSelectFork",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 43869,
                      "src": "1957:19:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (string memory,uint256) external returns (uint256)"
                      }
                    },
                    "id": 44551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "1979:10:20",
                      "2002:11:20"
                    ],
                    "names": [
                      "urlOrAlias",
                      "blockNumber"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "1957:71:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 44552,
                  "nodeType": "ExpressionStatement",
                  "src": "1957:71:20"
                },
                {
                  "assignments": [
                    44554
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44554,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nameLocation": "2046:4:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44579,
                      "src": "2038:12:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 44553,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2038:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44556,
                  "initialValue": {
                    "hexValue": "307841306238363939316336323138623336633164313944346132653945623063453336303665423438",
                    "id": 44555,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2053:42:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2038:57:20"
                },
                {
                  "assignments": [
                    44558
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44558,
                      "mutability": "mutable",
                      "name": "holder",
                      "nameLocation": "2113:6:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44579,
                      "src": "2105:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 44557,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2105:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44560,
                  "initialValue": {
                    "hexValue": "307837373133393734393038426534424564343731373233373031313565386231323139463441356630",
                    "id": 44559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2122:42:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x7713974908Be4BEd47172370115e8b1219F4A5f0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2105:59:20"
                },
                {
                  "assignments": [
                    44562
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44562,
                      "mutability": "mutable",
                      "name": "actualBalance",
                      "nameLocation": "2182:13:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44579,
                      "src": "2174:21:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 44561,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2174:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44569,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 44567,
                        "name": "holder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44558,
                        "src": "2221:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 44564,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44554,
                            "src": "2205:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 44563,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44453,
                          "src": "2198:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$44453_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 44565,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2198:12:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$44453",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 44566,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2211:9:20",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 44452,
                      "src": "2198:22:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 44568,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2198:30:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2174:54:20"
                },
                {
                  "assignments": [
                    44571
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44571,
                      "mutability": "mutable",
                      "name": "expectedBalance",
                      "nameLocation": "2246:15:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 44579,
                      "src": "2238:23:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 44570,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2238:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44573,
                  "initialValue": {
                    "hexValue": "3139365f3330375f3731332e3831303435376536",
                    "id": 44572,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2264:20:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_196307713810457_by_1",
                      "typeString": "int_const 196307713810457"
                    },
                    "value": "196_307_713.810457e6"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2238:46:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 44575,
                        "name": "actualBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44562,
                        "src": "2303:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 44576,
                        "name": "expectedBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44571,
                        "src": "2318:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 44574,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        40154,
                        40180,
                        40223,
                        40261,
                        40298,
                        40324,
                        40360,
                        40391,
                        40425,
                        40454,
                        40485,
                        40511,
                        40547,
                        40578,
                        40609,
                        40635,
                        40671,
                        40702,
                        40736,
                        40765,
                        40801,
                        40832,
                        40863,
                        40889,
                        40925,
                        40956
                      ],
                      "referencedDeclaration": 40863,
                      "src": "2294:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 44577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2294:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44578,
                  "nodeType": "ExpressionStatement",
                  "src": "2294:40:20"
                }
              ]
            },
            "documentation": {
              "id": 44522,
              "nodeType": "StructuredDocumentation",
              "src": "1429:198:20",
              "text": "@dev Fork test that runs against an Ethereum Mainnet fork. For this to work, you need to set `API_KEY_ALCHEMY`\n in your environment You can get an API key for free at https://alchemy.com."
            },
            "functionSelector": "b755d88d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFork_Example",
            "nameLocation": "1641:16:20",
            "parameters": {
              "id": 44523,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1657:2:20"
            },
            "returnParameters": {
              "id": 44524,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1669:0:20"
            },
            "scope": 44581,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 44455,
              "name": "PRBTest",
              "nameLocations": [
                "520:7:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 42713,
              "src": "520:7:20"
            },
            "id": 44456,
            "nodeType": "InheritanceSpecifier",
            "src": "520:7:20"
          },
          {
            "baseName": {
              "id": 44457,
              "name": "StdCheats",
              "nameLocations": [
                "529:9:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3624,
              "src": "529:9:20"
            },
            "id": 44458,
            "nodeType": "InheritanceSpecifier",
            "src": "529:9:20"
          }
        ],
        "canonicalName": "FooTest",
        "contractDependencies": [
          44435
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 44454,
          "nodeType": "StructuredDocumentation",
          "src": "361:139:20",
          "text": "@dev If this is your first time with Forge, read this tutorial in the Foundry Book:\n https://book.getfoundry.sh/forge/writing-tests"
        },
        "fullyImplemented": true,
        "internalFunctionIDs": {
          "17531": 1
        },
        "linearizedBaseContracts": [
          44581,
          3624,
          2860,
          42713
        ],
        "name": "FooTest",
        "nameLocation": "509:7:20",
        "scope": 44582,
        "usedErrors": [],
        "usedEvents": [
          39746,
          39750,
          39755,
          39760,
          39765,
          39770,
          39775,
          39780,
          39784,
          39788,
          39792,
          39796,
          39800,
          39806,
          39813,
          39820,
          39827,
          39834,
          39841,
          39848,
          39854,
          39860,
          39866,
          39872,
          39878
        ]
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 20
}